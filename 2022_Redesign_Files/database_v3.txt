
// Draft Three, with high scores per mode (story, mixed, wr, bc, lc), and only global,
// and with new multiplayer items.
// 
// 
// {
//   "rules": {
//     ".read": "auth != null",
//     ".write": "auth != null",
//   }
// }

{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "high_scores": {
      ".read": "auth != null",
      ".write": "!data.exists() && auth != null",
      "story": {
        "easy": {".indexOn": "score",},
        "medium": {".indexOn": "score",},
        "hard": {".indexOn": "score",},
        "beacon": {".indexOn": "score",}
      },
      "mixed": {
        "easy": {".indexOn": "score",},
        "medium": {".indexOn": "score",},
        "hard": {".indexOn": "score",},
        "beacon": {".indexOn": "score",}
      },
      "wr": {
        "easy": {".indexOn": "score",},
        "medium": {".indexOn": "score",},
        "hard": {".indexOn": "score",},
        "beacon": {".indexOn": "score",}
      },
      "bc": {
        "easy": {".indexOn": "score",},
        "medium": {".indexOn": "score",},
        "hard": {".indexOn": "score",},
        "beacon": {".indexOn": "score",}
      },
      "lc": {
        "easy": {".indexOn": "score",},
        "medium": {".indexOn": "score",},
        "hard": {".indexOn": "score",},
        "beacon": {".indexOn": "score",}
      },
      "$mode": {
        ".validate": "$mode === 'story' || $mode === 'mixed' || $mode === 'wr' || $mode === 'bc' || $mode === 'lc'",
        "$difficulty": {
          ".validate": "$difficulty === 'easy' || $difficulty === 'medium' || $difficulty === 'hard' || $difficulty === 'beacon'",
          "$score_item": {
            ".indexOn": "score",
            ".validate": "newData.hasChildren([
              'name',
              'score',
            ])",
            "name": {
              ".write": true,
              ".validate": "newData.val().matches(/^[A-Z]{1,6}$/)",
            },
            "score": {
              ".write": true,
              ".validate": "newData.isNumber() && newData.val() % 1 === 0.0 && newData.val() >= 0",
            },
          },
        },
      },
    },
    "games": {
      ".read": "auth != null",
      ".write": "!data.exists() && auth != null",
      ".indexOn": ["timestamp", "player_1_state", "player_2_state", "match_type"],
      "$game_name": {
        ".validate": "$game_name.matches(/^[A-Z]{5}$/) && newData.hasChildren([
          'match_type', // quick_open, quick_closed, code_open, code_closed
          'num_players', // 2, 3, or 4
          'ranked', // yes or no
          'game_type', // various modes, TBD
          'p1_state',   // empty, joined, ready, quit
          'p2_state',   // empty, joined, ready, quit
          'p3_state',   // empty, joined, ready, quit
          'p4_state',   // empty, joined, ready, quit
          'game_state',
          'timestamp'
        ])",
        "match_type": {
          ".write": true,
          ".validate": "newData.val() == 'quick_open' || newData.val() == 'quick_closed' || newData.val() == 'code_open' || newData.val() == 'code_closed'",
        },
        "num_players": {
          ".write": true,
          ".validate": "newData.isNumber() && newData.val() % 1 === 0.0 && (newData.val() == 2 || newData.val() == 3 || newData.val() == 4)",
        },
        "ranked": {
          ".write": true,
          ".validate": "newData.val() == 'yes' || newData.val() == 'no'",
        },
        "game_type": {
          ".write": true,
          ".validate": "newData.val() == 'word_rockets' || newData.val() == 'base_capture' || newData.val() == 'mixed'",
        },
        "p1_state": {
          ".write": true,
          ".validate": "newData.val() == 'empty' || newData.val() == 'joined' || newData.val() == 'ready' || newData.val() == 'quit' || newData.val() == 'win' || newData.val() == 'ended'",
        },
        "p2_state": {
          ".write": true,
          ".validate": "newData.val() == 'empty' || newData.val() == 'joined' || newData.val() == 'ready' || newData.val() == 'quit' || newData.val() == 'win' || newData.val() == 'ended'",
        },
        "p3_state": {
          ".write": true,
          ".validate": "newData.val() == 'empty' || newData.val() == 'joined' || newData.val() == 'ready' || newData.val() == 'quit' || newData.val() == 'win' || newData.val() == 'ended'",
        },
        "p4_state": {
          ".write": true,
          ".validate": "newData.val() == 'empty' || newData.val() == 'joined' || newData.val() == 'ready' || newData.val() == 'quit' || newData.val() == 'win' || newData.val() == 'ended'",
        },
        "p1_name": {
          ".write": true,
          ".validate": "newData.val().matches(/^[A-Z]{1,8}$/)",
        },
        "p2_name": {
          ".write": true,
          ".validate": "newData.val().matches(/^[A-Z]{1,8}$/)",
        },
        "p3_name": {
          ".write": true,
          ".validate": "newData.val().matches(/^[A-Z]{1,8}$/)",
        },
        "p4_name": {
          ".write": true,
          ".validate": "newData.val().matches(/^[A-Z]{1,8}$/)",
        },
        "game_state": {
          ".write": true,
          ".validate": "newData.val().matches(/^[a-z_]{0,40}$/)",
        },
        "timestamp": {
          ".write": true,
          ".validate": "newData.val() == now",
        }
      }
    },
  }
}

